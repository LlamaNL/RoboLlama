name: RoboLlama

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: [self-hosted, LLAMA-SERVER, Windows, X64]
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Backup JSON files
      shell: pwsh
      run: |
        Get-ChildItem -Path C:\RoboLlama -Filter *.json | ForEach-Object {
          Copy-Item -Path $_.FullName -Destination "$($_.FullName).bak" -Force
        }
    - name: Stop RoboLlama service if it exists and is running
      shell: pwsh
      run: |
        $service = Get-Service -Name "RoboLlama" -ErrorAction SilentlyContinue
        if ($null -ne $service -and $service.Status -eq 'Running') {
          Stop-Service -Name "RoboLlama"
        }
    - name: Publish RoboLlama
      run: dotnet publish RoboLlama --output C:\RoboLlama --configuration Release --self-contained true -r win-x64
    - name: Restore JSON files
      shell: pwsh
      run: |
        Get-ChildItem -Path C:\RoboLlama -Filter *.json.bak | ForEach-Object {
          Move-Item -Path $_.FullName -Destination ($_.FullName -replace '.bak$', '') -Force
        }
    - name: Publish Plugins
      shell: pwsh
      run: |
        Get-ChildItem -Path ./NewPlugins -Include *.csproj -Recurse | ForEach-Object {
          dotnet publish $_.FullName --output C:\RoboLlama\Plugins --configuration Release --self-contained true -r win-x64
        }
    - name: Register and start RoboLlama service
      shell: pwsh
      run: |
        $service = Get-Service -Name "RoboLlama" -ErrorAction SilentlyContinue
        if ($null -eq $service) {
          New-Service -Name "RoboLlama" -BinaryPathName "C:\RoboLlama\RoboLlama.exe"
        }
        Start-Service -Name "RoboLlama"
